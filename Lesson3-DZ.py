# 1. Реализовать функцию, принимающую два числа (позиционные аргументы) и выполняющую их деление.
#    Числа запрашивать у пользователя, предусмотреть обработку ситуации деления на ноль.

def divsion(a, b):
    try:
        return f'{a / b}'
    except ZeroDivisionError:
        return 'Делить на ноль нельзя!'
    except TypeError:
        return 'Введены неверные данные. Необходимо вводить только числа'


print(divsion(input('Введите перове число: '), input('Введите второе число: ')))


# 2. Выполнить функцию, которая принимает несколько параметров, описывающих данные пользователя:
#    имя, фамилия, год рождения, город проживания, email, телефон.
#    Функция должна принимать параметры как именованные аргументы.
#    Осуществить вывод данных о пользователе одной строкой.

def my_user_format(first_name, last_name, year, city, email, phone):
    return f'{first_name} {last_name}, {year}, {city}, {email}, {phone}'


print(my_user_format(
    last_name=input('Укажите фамилию: '),
    first_name=input('Укажите имя: '),
    year=input('Укажите год рождения: '),
    city=input('Укажите город проживания: '),
    email=input('Укажите E-mail: '),
    phone=input('Укажите номер телефона: ')
))


# 3. Реализовать функцию my_func(), которая принимает три позиционных аргумента
#    и возвращает сумму наибольших двух аргументов.

def my_two_max_summ(a, b, c):
    return f'Сумма двух наибольших чисел: {sum(sorted([a, b, c], reverse=True)[0:2])}'


print(my_two_max_summ(
    int(input('Введите первое число: ')),
    int(input('Введите второе число: ')),
    int(input('Введите третье число: '))
))

# Решение через лямбда-функцию
lambda_two_max_summ = lambda a, b, c: f'Сумма двух наибольших чисел: {sum(sorted([a, b, c], reverse=True)[0:2])}'

print(lambda_two_max_summ(
    int(input('Введите первое число: ')),
    int(input('Введите второе число: ')),
    int(input('Введите третье число: '))
))


# 4. Программа принимает действительное положительное число x и целое отрицательное число y.
#    Выполните возведение числа x в степень y.
#    Задание реализуйте в виде функции my_func(x, y).
#    При решении задания нужно обойтись без встроенной функции возведения числа в степень.
#
# Подсказка: попробуйте решить задачу двумя способами. Первый — возведение в степень с помощью оператора **.
# Второй — более сложная реализация без оператора **, предусматривающая использование цикла.


def my_pow_two_stars(x, y):
    return f'{x} в степени {y} равно: {x ** y}'


print(my_pow_two_stars(
    int(input('Введите основание степени: ')),
    int(input('Введите показатель степени: '))
))


def my_pow_loop(x, y):
    power = x
    y_abs = abs(y)

    for i in range(1, y_abs):
        power *= x

    if y < 0:
        power = 1 / power

    return f'{x} в степени {y} равно: {power}'


print(my_pow_loop(
    int(input('Введите основание степени: ')),
    int(input('Введите показатель степени: '))
))

# 5. Программа запрашивает у пользователя строку чисел, разделённых пробелом.
#    При нажатии Enter должна выводиться сумма чисел.
#    Пользователь может продолжить ввод чисел, разделённых пробелом и снова нажать Enter.
#    Сумма вновь введённых чисел будет добавляться к уже подсчитанной сумме.
#    Но если вместо числа вводится специальный символ, выполнение программы завершается.
#    Если специальный символ введён после нескольких чисел,
#    то вначале нужно добавить сумму этих чисел к полученной ранее сумме
#    и после этого завершить программу.
stop = False
summa = 0

while not stop:
    li = input('Введите несколь чисел через пробел и/или "S" для выхода: ').lower().split()

    for i in li:
        if i == 's':
            stop = True
            break
        else:
            summa += int(i)

    print(f'Сумма составляет: {summa}')


# 6. Реализовать функцию int_func(), принимающую слова из маленьких латинских букв и возвращающую их же,
#    но с прописной первой буквой. Например, print(int_func(‘text’)) -> Text.

def int_func(txt = ''):
    return txt.capitalize()

print(int_func('text'))

# 7. Продолжить работу над заданием. В программу должна попадать строка из слов, разделённых пробелом.
#    Каждое слово состоит из латинских букв в нижнем регистре.
#    Нужно сделать вывод исходной строки, но каждое слово должно начинаться с заглавной буквы.
#    Используйте написанную ранее функцию int_func().

string = input('Введите строку из нескольких слов: ').lower().split()

for i, word in enumerate(string):
    string[i] = int_func(word)

print(' '.join(string))
