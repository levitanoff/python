# 1. Реализовать скрипт, в котором должна быть предусмотрена функция расчёта заработной платы сотрудника.
#    Используйте в нём формулу: (выработка в часах*ставка в час) + премия.
#    Во время выполнения расчёта для конкретных значений необходимо запускать скрипт с параметрами.

from sys import argv

hours, rate, bonus = map(int, argv[1:])

salary = hours * rate + bonus

print(f'Зарплата сотрудника: {salary} руб.')


# 2. Представлен список чисел. Необходимо вывести элементы исходного списка,
#    значения которых больше предыдущего элемента.
#
# Подсказка: элементы, удовлетворяющие условию, оформить в виде списка. Для его формирования используйте генератор.
# Пример исходного списка: [300, 2, 12, 44, 1, 1, 4, 10, 7, 1, 78, 123, 55].
# Результат: [12, 44, 4, 10, 78, 123].

li = [300, 2, 12, 44, 1, 1, 4, 10, 7, 1, 78, 123, 55]

out_1 = [el for i, el in enumerate(li[1:], 1) if el > li[i - 1]]  # Первый вариант
print(out_1)

out_2 = [li[i] for i in range(1, len(li)) if li[i] > li[i-1]]  # Второй вариант
print(out_2)

# 3. Для чисел в пределах от 20 до 240 найти числа, кратные 20 или 21. Решите задание в одну строку.
#
# Подсказка: используйте функцию range() и генератор.

out_3 = [i for i in range(20, 241) if i % 20 == 0 or i % 21 == 0]
print(out_3)


# 4. Представлен список чисел. Определите элементы списка, не имеющие повторений.
#    Сформируйте итоговый массив чисел, соответствующих требованию.
#    Элементы выведите в порядке их следования в исходном списке.
#    Для выполнения задания обязательно используйте генератор.
#
# Пример исходного списка: [2, 2, 2, 7, 23, 1, 44, 44, 3, 2, 10, 7, 4, 11].
# Результат: [23, 1, 3, 10, 4, 11]

li = [2, 2, 2, 7, 23, 1, 44, 44, 3, 2, 10, 7, 4, 11]

out_4 = [el for el in li if li.count(el) == 1]
print(out_4)


# 5. Реализовать формирование списка, используя функцию range() и возможности генератора.
#    В список должны войти чётные числа от 100 до 1000 (включая границы).
#    Нужно получить результат вычисления произведения всех элементов списка.
#
# Подсказка: использовать функцию reduce().
from functools import reduce

def multiplication(a, b):
    return int(a) * int(b)

print(reduce(multiplication, [i for i in range(100, 1001) if i % 2 == 0]))

# 6. Реализовать два небольших скрипта:
#
#     итератор, генерирующий целые числа, начиная с указанного;
#     итератор, повторяющий элементы некоторого списка, определённого заранее.
#     Подсказка: используйте функцию count() и cycle() модуля itertools.
#     Обратите внимание, что создаваемый цикл не должен быть бесконечным.
#     Предусмотрите условие его завершения.
#     #### Например, в первом задании выводим целые числа, начиная с 3.
#     При достижении числа 10 — завершаем цикл.
#     Вторым пунктом необходимо предусмотреть условие,
#     при котором повторение элементов списка прекратится.

from itertools import count, cycle
from random import randint

#  Первый скрипт
rnd = randint(1, 100)

for i in count(rnd):
    if i > rnd + 10:
        break
    else:
        print(i)

#  Второй скрипт
li = ['el_' + str(i) for i in range(0, 10)]

i = 0

for el in cycle(li):
    if i == 10:
        break

    if el == 'el_9':
        i += 1

    print(el)


# 7. Реализовать генератор с помощью функции с ключевым словом yield, создающим очередное значение.
#    При вызове функции должен создаваться объект-генератор.
#    Функция вызывается следующим образом: for el in fact(n).
#    Она отвечает за получение факториала числа.
#    В цикле нужно выводить только первые n чисел, начиная с 1! и до n!.
#
# Подсказка: факториал числа n — произведение чисел от 1 до n. Например, факториал четырёх 4! = 1 * 2 * 3 * 4 = 24.
#
from random import randint

n = randint(1, 10)


def fact(n):
    for el in range(1, n + 1):
        yield el


g = fact(n);

res = 1
for el in g:
    res *= el

print(f'Факториал {n}! равен {res}')


