# 1. Создать список и заполнить его элементами различных типов данных.
# Реализовать скрипт проверки типа данных каждого элемента.
# Использовать функцию type() для проверки типа.
# Элементы списка можно не запрашивать у пользователя, а указать явно, в программе.

li = [
    4, #
    4.2, #
    complex(5, 6), #
    'Строка', #
    True,
    None,
    [1, 2, 3, 4, 5, 6, 7], #
    (2, 5, 3, 'R'),
    {'key_1': 1, 'key_2': 'String'},
    set('abrakadabra'),
]

for var in li:
    print(type(var))


# 2. Для списка реализовать обмен значений соседних элементов.
# Значениями обмениваются элементы с индексами 0 и 1, 2 и 3 и т. д.
# При нечётном количестве элементов последний сохранить на своём месте.
# Для заполнения списка элементов нужно использовать функцию input().

li = input('Введите несколько слов или чисел: ').split()
print(f'Стартовое значение списка:\t{li}')

for i in range(0, len(li) - len(li) % 2, 2):
    li[i], li[i + 1] = li[i + 1], li[i]

print(f'Список после обработки: \t{li}')

# 3. Пользователь вводит месяц в виде целого числа от 1 до 12.
# Сообщить, к какому времени года относится месяц (зима, весна, лето, осень).
# Напишите решения через list и dict.

months_dict = {
    'Зима':  [1, 2, 12],
    'Весна': [3, 4, 5],
    'Лето':  [6, 7, 8],
    'Осень': [9, 10, 11],
}

num = int(input('Введите номер месяца: '))

if num < 1 or num > 12:
    print('Указан неверный номер месяца')
    exit(1)

for season in months_dict:
    if num in months_dict[season]:
        print(f'Время года: {season}')



# 4. Пользователь вводит строку из нескольких слов, разделённых пробелами.
# Вывести каждое слово с новой строки. Строки нужно пронумеровать.
# Если слово длинное, выводить только первые 10 букв в слове.

li = input('Введите строку из нескольких слов: ').split()

for i, word in enumerate(li):
    print(f'{i + 1}\t{word[0:10]}')

# 5. Реализовать структуру «Рейтинг», представляющую собой набор натуральных чисел,
# который не возрастает. У пользователя нужно запрашивать новый элемент рейтинга.
# Если в рейтинге существуют элементы с одинаковыми значениями,
# то новый элемент с тем же значением должен разместиться после них.
#
# Подсказка. Например, набор натуральных чисел: 7, 5, 3, 3, 2.
# Пользователь ввёл число 3. Результат: 7, 5, 3, 3, 3, 2.
# Пользователь ввёл число 8. Результат: 8, 7, 5, 3, 3, 2.
# Пользователь ввёл число 1. Результат: 7, 5, 3, 3, 2, 1.
# Набор натуральных чисел можно задать сразу в коде, например, my_list = [7, 5, 3, 3, 2].


li = []

while True:
    num = input('Введите число или "s" для остановки: ')

    if num == 's':
        print('Спасибо за терпение. До встречи!')
        break
    else:
        num = int(num)

    # Ищем число в списке
    if num in li:
        # Если есть - добавляем
        li.insert(li.index(num) + li.count(num), num) # Pedant style
    else:
        i = num - 1
        # Если нет, то перебираем с убыванием до нуля
        while i != 0:
            if i == 1: # Дошли до единицы - дальше ничего нет - добавляем элемент в список
                li.append(num)
            if i in li: # Нашли ближайший элемент - добавляем перед ним
                li.insert(li.index(i), num)
                break
            else:
                i -= 1
                continue

    print(li)

#
# Другой вариант решения (пришёл в голову первым)
#
#
li = []

while True:
    num = input('Введите число или "s" для остановки: ')

    if num == 's':
        print('Спасибо за терпение. До встречи!')
        break
    else:
        num = int(num)

    # Ищем число в списке
    if num in li: # Если есть - добавляем
        li.insert(li.index(num) + li.count(num), num) # Pedant style
    else: # Добавляем в конец и сортируем в обратном порядке
        li.append(num)
        li.sort(reverse=True)
    print(li)


# 6. * Реализовать структуру данных «Товары». Она должна представлять собой список кортежей.
# Каждый кортеж хранит информацию об отдельном товаре.
# В кортеже должно быть два элемента — номер товара и словарь с параметрами,
# то есть характеристиками товара: название, цена, количество, единица измерения.
# Структуру нужно сформировать программно, запросив все данные у пользователя.
#
# Пример готовой структуры:
#
# [
# (1, {“название”: “компьютер”, “цена”: 20000, “количество”: 5, “eд”: “шт.”}),
# (2, {“название”: “принтер”, “цена”: 6000, “количество”: 2, “eд”: “шт.”}),
# (3, {“название”: “сканер”, “цена”: 2000, “количество”: 7, “eд”: “шт.”})
# ]
# Нужно собрать аналитику о товарах.
# Реализовать словарь, в котором каждый ключ — характеристика товара, например, название.
# Тогда значение — список значений-характеристик, например, список названий товаров.
#
# Пример:
#
# {
# “название”: [“компьютер”, “принтер”, “сканер”],
# “цена”: [20000, 6000, 2000],
# “количество”: [5, 2, 7],
# “ед”: [“шт.”]
# }


####
#### Не успел. Выключали электричество
####

